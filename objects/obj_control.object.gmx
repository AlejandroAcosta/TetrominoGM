<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instantiate control object

scr_get_input();
state = "MOVE";
score = 0;
lines = 0;
level = 1;

last_lines = 0;
block_speed = room_speed;

if (debug_mode) {
    object_set_visible(obj_block_destroyer, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for input and manage the game
scr_get_input();

if (!instance_exists(obj_active_block)) {
   with (obj_standby_block) {
        scr_create_block(selected_sprite_index, sprite_index);
        get_next = true;
   }
}

switch(state) {
    case "MOVE":
        scr_move_block(self, obj_active_block);
        break;
    case "LINE CHECK":
        var line_cleared = scr_check_lines(self);
        if (line_cleared) {
            state = "LINE CLEAR";
        }
        else {
            state = "MOVE";
        }
        break;
    case "LINE CLEAR":
        var lines_cleared = lines - last_lines;
        score += 100 * lines_cleared * level;

        last_lines = lines;

        var level_up = lines / 10 &gt;= level;
        if (level_up) {
            state = "LEVEL UP";
        }
        else {
            state = "MOVE";
        }
        break;
    case "LEVEL UP":
        level += 1;
        var prev_block_speed = block_speed;
        var speed_change = floor( prev_block_speed / 3);
        block_speed -= speed_change;

        if (block_speed &lt; 1) {
            block_speed = 1;
        }

        state = "MOVE";

        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug information

draw_set_font(fnt_game);
draw_set_color(c_black);

var x_score_pos = 15 * BLOCK_WIDTH;
var y_score_pos = 0.9 * BLOCK_HEIGHT;

draw_set_halign(fa_left);
draw_text(x_score_pos, y_score_pos, ' S C O R E');

draw_set_halign(fa_right);
draw_text(x_score_pos + 4.8*BLOCK_WIDTH, y_score_pos + 2*BLOCK_HEIGHT, string(score));

var x_level_pos = 15.1 * BLOCK_WIDTH;
var y_level_pos = 4.9 * BLOCK_HEIGHT;

draw_set_halign(fa_left);
draw_text(x_level_pos, y_level_pos, ' L E V E L');

draw_set_halign(fa_right);
draw_text(x_level_pos + 4.7 * BLOCK_WIDTH, y_level_pos + BLOCK_HEIGHT, string(level));

var x_line_pos = 15.2 * BLOCK_WIDTH;
var y_line_pos = 8.9 * BLOCK_HEIGHT;

draw_set_halign(fa_left);
draw_text(x_line_pos, y_line_pos, ' L I N E S');

draw_set_halign(fa_right);
draw_text(x_line_pos + 4.5 * BLOCK_WIDTH, y_line_pos + BLOCK_HEIGHT, string(lines));

if (debug_mode) {
    draw_set_font(noone);
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    with (obj_active_block) {
        draw_text(64, 0, "x position is: " + string(x));
        draw_text(64, 16, "y position is: " + string(y));
        draw_text(64, 32, "bbox top is: " + string(bbox_top));
        draw_text(64, 48, "bbox left is: " + string(bbox_left));
        draw_text(64, 64, "bbox right is: " + string(bbox_right));
        draw_text(64, 80, "bbox bottom is: " + string(bbox_bottom));
        draw_text(64, 96, "line check begins at: " + string(BLOCK_WIDTH * (0.5+LEFT_WALL)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
