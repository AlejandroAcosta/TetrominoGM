<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instantiate control object

scr_get_input();

// Initialize block positions
for( var i = LEVEL_WIDTH-1; i &gt;= 0; i--) {
     for (var j = LEVEL_HEIGHT-1; j &gt;= 0; j--) {
         blocks[i, j] = noone;
     }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for input and manage the game
scr_get_input();

if (!instance_exists(obj_active_block)) {
   with (obj_standby_block) {
        var block = scr_create_block(selected_sprite_index, sprite_index);
        get_next = true;
   }
}

if (instance_exists(obj_active_block)) {
    scr_move_block(self, obj_active_block);

    // Check if we've reached the bottom of the map
    var level_height = LEVEL_HEIGHT * BLOCK_HEIGHT;
    var level_width = LEVEL_WIDTH * BLOCK_WIDTH;

    var collided_with_bottom = collision_line(
            0, level_height,
            level_width, level_height,
            obj_active_block, false, false
    ) || false;

    var collided_with_placed_block = false;
    with (obj_active_block) {
         collided_with_placed_block = place_meeting(x, y, obj_placed_block);
    }

    if (collided_with_bottom || collided_with_placed_block) {
        scr_place_block(obj_active_block, blocks);
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
